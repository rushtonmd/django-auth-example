from django.shortcuts import render
from django.views import View
from django.contrib.auth import views as auth_views

from .forms import CustomUserCreationForm
from .forms import ProfileEditForm
from django.contrib.sites.shortcuts import get_current_site
from django.template.loader import render_to_string
from django.utils.http import urlsafe_base64_encode
from django.utils.http import urlsafe_base64_decode
from django.utils.encoding import force_bytes
from .tokens import account_activation_token
from django.core.mail import EmailMessage
from django.contrib.auth.models import User
from django.views.generic.base import TemplateView
from django.shortcuts import redirect
from django.urls import reverse_lazy
from django.contrib.auth import logout
from django.contrib.auth.mixins import LoginRequiredMixin
from django.core.files.storage import FileSystemStorage


# AccountViewFactory
#
# This factory class generates all of the views for the accounts application.
# The create_view() method is used as the main entry point for all of the
# subsequent accoun types. The account_types tuple holds a list of all
# available account types that have associated views.
class AccountViewFactory():

    # A list of all valid views that can be generated by this factory
    account_types = (
        'signup',
        'needs_activation',
        'activation_successful',
        'activation_invalid',
        'logout',
        'login',
        'activate',
        'password_change',
        'password_change_done',
        'password_reset',
        'password_reset_done',
        'password_reset_confirm',
        'password_reset_complete',
        'profile',
        )

    @classmethod
    def create_signup(cls, **kwargs):
        # Get the SignupView class
        view = SignupView

        # Return the updated SignupView as a view
        return view.as_view(**kwargs)

    @classmethod
    def create_needs_activation(cls, **kwargs):
        # Get the GenericMessageView class
        view = GenericMessageView

        # Set the default message
        default_message = {'message': 'Please check your email to active your account.'}

        # Combine the keyword arguments
        combined_args = {**default_message, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_activation_successful(cls, **kwargs):
        # Get the GenericMessageView class
        view = GenericMessageView

        # Set the default message
        default_message = {'message': 'Your account has been successfully activated!'}

        # Combine the keyword arguments
        combined_args = {**default_message, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_activation_invalid(cls, **kwargs):
        # Get the GenericMessageView class
        view = GenericMessageView

        # Set the default message
        default_message = {'message': 'Invalid activation link.'}

        # Combine the keyword arguments
        combined_args = {**default_message, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_logout(cls, **kwargs):
        # Get the CustomLogoutView class
        view = CustomLogoutView

        # Set the default args
        default_args = {
            'message': 'You have been successfully logged out.',
            'next_page': reverse_lazy('login'),
            }

        # Combine the keyword arguments
        combined_args = {**default_args, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_login(cls, **kwargs):
        # Get the LoginView class
        view = auth_views.LoginView

        # Set the default args
        default_args = {'template_name': 'account/login.html'}

        # Combine the keyword arguments
        combined_args = {**default_args, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_activate(cls, **kwargs):
        # Get the ActivateUser class
        view = ActivateUserView

        # Return the updated view with the combined args
        return view.as_view(**kwargs)

    @classmethod
    def create_password_change(cls, **kwargs):
        # Get the PasswordChangeView class
        view = auth_views.PasswordChangeView

        # Set the default args
        default_args = {'template_name': 'password_reset/password_change_form.html'}

        # Combine the keyword arguments
        combined_args = {**default_args, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_password_change_done(cls, **kwargs):
        # Get the GenericMessageView class
        view = GenericMessageView

        # Set the default message
        default_message = {'message': 'Password Change Complete!'}

        # Combine the keyword arguments
        combined_args = {**default_message, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_password_reset(cls, **kwargs):
        # Get the PasswordResetView class
        view = auth_views.PasswordResetView

        # Set the default message
        default_args = {
            'template_name': 'password_reset/password_reset_form.html',
            'email_template_name': 'password_reset/password_reset_email.html',
            'subject_template_name': 'password_reset/password_reset_subject.txt'}

        # Combine the keyword arguments
        combined_args = {**default_args, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_password_reset_done(cls, **kwargs):
        # Get the PasswordResetDoneView class
        view = auth_views.PasswordResetDoneView

        # Create the message
        message = render_to_string('password_reset/password_reset_done.html')

        # Set the default message
        default_args = {
            'template_name': 'account/generic_message.html',
            'extra_context': {'message': message}}

        # Combine the keyword arguments
        combined_args = {**default_args, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_password_reset_confirm(cls, **kwargs):
        # Get the PasswordResetConfirmView class
        view = auth_views.PasswordResetConfirmView

        # Set the default message
        default_args = {'template_name': 'password_reset/password_reset_confirm.html'}

        # Combine the keyword arguments
        combined_args = {**default_args, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_password_reset_complete(cls, **kwargs):
        # Get the PasswordResetCompleteView class
        view = auth_views.PasswordResetCompleteView

        # Create the message
        message = render_to_string('password_reset/password_reset_complete.html')

        # Set the default message
        default_args = {
            'template_name': 'account/generic_message.html',
            'extra_context': {'message': message}}

        # Combine the keyword arguments
        combined_args = {**default_args, **kwargs}

        # Return the updated view with the combined args
        return view.as_view(**combined_args)

    @classmethod
    def create_profile(cls, **kwargs):

        # Get the ProfileEditView view
        view = ProfileEditView

        # Return the updated view with the combined args
        return view.as_view(**kwargs)

    @classmethod
    def create_view(cls, type, **kwargs):

        # Ensure that the type passed to the method is valid
        if type not in cls.account_types:
            return None

        # Return the generated view from the cooresponding type method
        return getattr(cls, 'create_' + type)(**kwargs)


# SignupView
#
# This class is used to sign up a new user.
class SignupView(View):

    # Initial value for the class used to send confirmation emails
    email_generator = EmailMessage

    # Initial value for the signup form class
    signup_form = CustomUserCreationForm

    # Initial value for the class attribute
    needs_activation_template = 'needs_activation'

    # Set the initial value for the template name
    template_name = 'account/signup.html'

    # Set the initial value for the email template
    email_template_name = 'account/signup_email.html'

    # Set the initial value for the email subject template
    subject_template_name = 'account/signup_email_subject.txt'

    # The send_mail function aggregates the user information from the request
    # and the signup form to create and send an email to the new user. This
    # email is used to activate the account.
    def send_email(self, request, user, form):

        # Create the email subject from the corresponding template. We strip
        # out the new line characters to ensure only a single line of text is
        # used for the email subject
        mail_subject = render_to_string(self.subject_template_name).strip('\n')

        # Get the current site from the request
        current_site = get_current_site(request)

        # Generate the message from the email template. The uid and token are
        # generated by the token generator, then sent in the email as a clickable
        # link. When the user clicks on the link, the uid and token are sent
        # back as a get request, activating the users account.
        message = render_to_string(self.email_template_name, {
            'user': user,
            'domain': current_site.domain,
            'uid': urlsafe_base64_encode(force_bytes(user.pk)).decode(),
            'token': account_activation_token.make_token(user),
        })

        # Set the TO recipient for the outgoing email. The username in our form
        # is also the email address of the user.
        to_email = form.cleaned_data.get('username')

        # The email_generator generates and sends the email to the user
        email = self.email_generator(mail_subject, message, to=[to_email])

        # Send the email
        email.send()

    # Override the post method from the base View class
    def post(self, request):

        # Get the form from the request
        form = self.signup_form(request.POST)

        # Run validations on the form
        if form.is_valid():
            # Generate a new user, but don't save to the database yet
            user = form.save(commit=False)

            # Set the user as NOT active
            user.is_active = False

            # Save the user to the database
            user.save()

            # Once the user is saved, send the activation email
            self.send_email(request, user, form)

            # Redirect to the needs activation template
            return redirect(self.needs_activation_template)

        # If the form is NOT valid
        else:
            # Render the template (form) again, which will display the errors
            return render(request, self.template_name, {'form': form})

    # Override the get method of the base View class
    def get(self, request):

        # Get the signup form
        form = self.signup_form()

        # Render the appropriate template, and send the signup form
        return render(request, self.template_name, {'form': form})


# ActivateUserView
#
# This class is used to activate a new user. Once an email is sent, the user
# clicks on the link. This class will accept the the uid and token and
# activate the new user.
class ActivateUserView(View):

    # Set the initial value for the redirect path on a succesful activation
    redirect_success = 'activation_successful'

    # Set the initial value for the redirect path on an invalid activation
    redirect_invalid = 'activation_invalid'

    # Override the get method of the base View class. This method will
    # accept the uid and the token from the user
    def get(self, request, uidb64, token):

        # Determine if a user exists given the uid
        try:

            # Decode the uid
            uid = urlsafe_base64_decode(uidb64).decode()

            # Lookup the user
            user = User.objects.get(pk=uid)

        # If there is no user or other error, set the user to None
        except(TypeError, ValueError, OverflowError, User.DoesNotExist):
            user = None

        # Check to see if there is a user found and the token is valid
        if user is not None and account_activation_token.check_token(user, token):

            # Set the user to active
            user.is_active = True

            # Save the user to the dabase
            user.save()

            # Return to the success route
            return redirect(self.redirect_success)

        # If there is no user OR if the token is invalid
        else:

            # Return the invalid token route
            return redirect(self.redirect_invalid)


# GenericMessageView
#
# This is a generic view used to display a single message
class GenericMessageView(TemplateView):

    # Set the template name
    template_name = 'account/generic_message.html'

    # Initialize the message to an empty string
    message = ''

    # Override the get method of the base class TemplateView
    def get(self, request):

        # Return the template with the message
        return render(request, self.template_name, {'message': self.message})


# CustomLogoutView
#
# This is the view used to logout a user and inherits from the LogoutView class
class CustomLogoutView(auth_views.LogoutView):

    # Set the template name
    template_name = 'account/generic_message.html'

    # Initialize the message to an empty string
    message = ''

    # Override the get method of the base class LogoutView
    def get(self, request):

        # Logout the user
        logout(request)

        # Return the template with the message
        return render(request, self.template_name, {'message': self.message})


class ProfileEditView(LoginRequiredMixin, TemplateView):

    # Set the template name
    template_name = 'account/profile.html'

    # Set the profile edit form type
    profile_form = ProfileEditForm

    # Override the post method from the base View class
    def post(self, request):

        # Get the form from the request
        form = self.profile_form(request.POST, request.FILES, instance=request.user.profile)

        if form.is_valid():

            form.save()

            # Render the template (form) again, which will display the errors
            return redirect('/account/profile?' + 'saved_successfully=true', {'form': form})

        else:
            # Render the template (form) again, which will display the errors
            return render(request, self.template_name, {'form': form})

    def get(self, request):

        saved = request.GET.get('saved_successfully', None)

        # Return the profile edit template and form
        form = self.profile_form(initial={'bio': request.user.profile.bio})

        # Render the appropriate template, and send the profile edit form
        return render(request, self.template_name, {'form': form, 'saved_successfully': saved})
